Grammar :=
{
	ws = /[ \t\v\f]+/;
	nl = /\n\r|\r|\n|\r\n/;
	string = /"([^"\\]|\\[^\0])+"/;
	regex = /\/([^\/]|\\\/)*\//;
	identifier = /[a-zA-Z][a-zA-Z_0-9]*/;


	parser := parser grammar;
	parser := grammar;
	grammar := identifier ":=" "{" definition "}" ";" : grammar(identifier);
	grammar := "[:" identifier ":]" ":=" regex ";" : regexGroup(identifier);
	definition := @;
	definition := definition production;
	production := identifier ":=" body action ";" : production(identifier, body.no);
	production := identifier ":=" "@" action ";" : production(identifier);
	production := "@" ":=" body action ";" : ignoreProduction(body.no);
	production := tokendef ";";
	tokendef := identifier "=" string : token(identifier, string);
	tokendef := identifier "=" regex : token(identifier, regex);
	
	
	body := body "|" bodyexpr : no = alternative(body.no, bodyexpr.no);
	body := bodyexpr : no = bodyexpr.no;
	bodyexpr := bodyexpr bodyterm: addTerm(bodyexpr.no, bodyterm.id), no = bodyexpr.no;
	bodyexpr := bodyterm : no = newBodyExpr(bodyterm.id);
	bodyterm := term : id = term.id;
	bodyterm := "[" body "]" : id = optional(body.no);
	bodyterm := "{" body "}" : id = list(body.no);
	bodyterm := "(" body ")" : id = newSubExpr(body.no);
	
	term := identifier : id = nonTerminal(identifier);
	term := string : id = terminal(string);
	term := regex : id = terminal(regex);
	term := "$" : id = endToken();
	
	action := @ : action();
	action := ":" commandlist : action();
	commandlist := command;
	commandlist := commandlist "," command;
	command := identifier "(" ")": function(identifier);
	command := identifier "(" list ")" : function(identifier);
	command := lparameter "=" identifier "(" ")" : function(identifier);
	command := lparameter "=" identifier "(" list ")" : function(identifier);
	command := lparameter "=" parameter : assignment();
	lparameter := parameter : lparameter();
	list := list "," parameter : parameter();
	list := parameter : parameter();
	parameter := parameter "." identifier : concatParameter(identifier);
	parameter := identifier : concatParameter(identifier);
	@ := nl : newLine();
	@ := ws;
};

Regex :=
{
	C = /[^\^\-\|\(\)\*\+\?\[\]\\]/;
	
	S := E;
	S := E "-" E : lookahead();
	E := E "|" D : alternative();
	E := D;
	D := D F : concat();
	D := F;
	F := "(" E ")";
	F := F "*" : asterisk();
	F := F "+" : plus();
	F := F "?" : optional();
	F := I : character(I.C);
	F := "[" G "]" : group();
	F := "[" "^" G "]" : inverseGroup();
	G := I : singleton(I.C);
	G := J "-" I : interval(J.I.C, I.C);
	G := G I : concatSingleton(I.C);
	G := G J "-" I : concatInterval(J.I.C, I.C);
	J := I;
	
	A = /[^\0]|\0/;
	I := C;
	I := "\\" A : C = escChar(A);
};
